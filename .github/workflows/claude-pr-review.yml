name: Claude PR Review Assistant

on:
  # Trigger on PR comments mentioning @claude
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  pull_request_review:
    types: [submitted]
  
  # Auto-review on PR open/sync
  pull_request:
    types: [opened, synchronize]

jobs:
  claude-interactive-review:
    # Run when @claude is mentioned
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude'))
    
    # Use GitHub-hosted runner by default (change to self-hosted if available)
    runs-on: ubuntu-latest
    # For self-hosted: runs-on: [self-hosted, ai-dev-runner-1]
    
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better context
      
      - name: Extract Complexity
        id: complexity
        run: |
          # Extract complexity from PR body
          PR_BODY="${{ github.event.issue.body || github.event.pull_request.body }}"
          COMPLEXITY=$(echo "$PR_BODY" | grep -oP '[Cc]omplexity:\s*\K\d+' | head -1 || echo "5")
          echo "complexity=$COMPLEXITY" >> $GITHUB_OUTPUT
          
          # Extract domain
          DOMAIN=$(echo "$PR_BODY" | grep -oP '[Dd]omain:\s*\K\w+' | head -1 || echo "general")
          echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
      
      - name: Run Claude Interactive Review
        if: ${{ secrets.CLAUDE_API_KEY != '' }}
        uses: anthropics/claude-code-action@beta
        with:
          # Use API key from organization secrets
          claude_api_key: ${{ secrets.CLAUDE_API_KEY }}
          
          # Use Claude Opus for thorough reviews
          model: "claude-opus-4-1-20250805"
          
          timeout_minutes: "60"
          
          # Allow tool usage for testing and evidence collection
          allowed_tools: "Bash(shellcheck),Bash(npm test),Bash(pytest),Grep,Read"
      
      - name: Post Setup Instructions
        if: ${{ secrets.CLAUDE_API_KEY == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const setupGuide = `## 🔧 Claude PR Review Setup Required
            
            To enable automated PR reviews, please configure the following GitHub secrets:
            
            ### Required Secrets:
            1. **CLAUDE_API_KEY** - Your Anthropic API key from console.anthropic.com
            2. **GITHUB_TOKEN** - Automatically provided by GitHub Actions
            
            ### How to Configure:
            
            1. **Get your Claude Code OAuth tokens:**
               - Install Claude Code CLI: \`npm install -g @anthropic-ai/claude-code\`
               - Authenticate: \`claude auth\`
               - Tokens are stored in \`~/.claude/config.json\`
            
            2. **Add secrets to repository:**
               - Go to Settings → Secrets and variables → Actions
               - Click "New repository secret"
               - Add each token with the exact name above
            
            3. **Verify setup:**
               - Comment "@claude please review" on any PR
               - The bot should respond within 2-3 minutes
            
            For detailed instructions, see [SETUP_GUIDE.md](https://github.com/good-night-oppie/oppie-autonav/blob/main/docs/SETUP_GUIDE.md#github-secrets-configuration)
            
            ---
            *Once configured, this message will not appear and Claude will automatically review your PRs.*`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: setupGuide
            });

  claude-auto-review:
    # Auto-review on PR changes
    if: github.event_name == 'pull_request'
    
    runs-on: ubuntu-latest  # Use GitHub-hosted runner
    # For self-hosted: runs-on: [self-hosted, ai-dev-runner-1]
    
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Detect Complexity
        id: detect
        run: |
          # Count changed files
          FILE_COUNT=$(git diff --name-only origin/main...HEAD | wc -l)
          
          # Count changed lines
          LINE_COUNT=$(git diff --stat origin/main...HEAD | tail -1 | grep -oP '\d+(?= insertions)' || echo "0")
          
          # Calculate complexity
          if [ "$LINE_COUNT" -gt 500 ] || [ "$FILE_COUNT" -gt 10 ]; then
            COMPLEXITY=8
          elif [ "$LINE_COUNT" -gt 200 ] || [ "$FILE_COUNT" -gt 5 ]; then
            COMPLEXITY=6
          elif [ "$LINE_COUNT" -gt 50 ] || [ "$FILE_COUNT" -gt 2 ]; then
            COMPLEXITY=4
          else
            COMPLEXITY=3
          fi
          
          echo "complexity=$COMPLEXITY" >> $GITHUB_OUTPUT
          echo "Detected complexity: $COMPLEXITY/10 (Files: $FILE_COUNT, Lines: $LINE_COUNT)"
      
      - name: Select Reviewer Persona
        id: persona
        run: |
          COMPLEXITY="${{ steps.detect.outputs.complexity }}"
          
          if [ "$COMPLEXITY" -ge 9 ]; then
            PERSONA="Chief Architect"
            ROUNDS="3-4"
          elif [ "$COMPLEXITY" -ge 7 ]; then
            PERSONA="Principal Engineer"
            ROUNDS="2-3"
          elif [ "$COMPLEXITY" -ge 5 ]; then
            PERSONA="Senior Developer"
            ROUNDS="1-2"
          else
            PERSONA="Code Reviewer"
            ROUNDS="1"
          fi
          
          echo "persona=$PERSONA" >> $GITHUB_OUTPUT
          echo "rounds=$ROUNDS" >> $GITHUB_OUTPUT
      
      - name: Run Claude Automated Review
        id: claude-review
        if: ${{ secrets.CLAUDE_API_KEY != '' }}
        uses: anthropics/claude-code-action@beta
        with:
          # Use API key from organization secrets
          claude_api_key: ${{ secrets.CLAUDE_API_KEY }}
          
          # Use Claude Opus for thorough reviews
          model: "claude-opus-4-1-20250805"
          
          # Dynamic review prompt based on complexity
          direct_prompt: |
            Please review this Pull Request.
            
            ## Your Role: ${{ steps.persona.outputs.persona }}
            You are reviewing with complexity ${{ steps.detect.outputs.complexity }}/10 depth.
            Expected review rounds: ${{ steps.persona.outputs.rounds }}
            
            ## Focus Areas
            
            1. **Code Quality**:
               - Best practices and patterns
               - Error handling and edge cases
               - Performance considerations
               - Security vulnerabilities
            
            2. **Architecture** (for complexity >= 7):
               - System design and scalability
               - Component boundaries
               - Technical debt assessment
            
            3. **Testing** (for complexity >= 5):
               - Test coverage adequacy
               - Edge case handling
               - Integration test requirements
            
            4. **Documentation**:
               - Code comments and clarity
               - API documentation
               - README updates needed
            
            ## Review Deliverables
            
            Based on complexity ${{ steps.detect.outputs.complexity }}/10:
            ${{ steps.detect.outputs.complexity >= 7 && '- [ ] Architecture analysis
            - [ ] Performance validation
            - [ ] Security assessment
            - [ ] Alternative approaches' || '- [ ] Code correctness
            - [ ] Best practices compliance' }}
            
            Provide specific, actionable feedback with code examples where helpful.
            Be constructive and explain the "why" behind suggestions.
            
            If critical issues found, mark as "NOT READY FOR MERGE".
            If looks good, mark as "APPROVED" or "READY FOR MERGE".
          
          # Use sticky comments for iterative reviews
          use_sticky_comment: true
          
          # Tools for validation
          allowed_tools: "Bash(shellcheck),Grep,Read"
      
      - name: Post Setup Instructions for Auto-Review
        if: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN == '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🔧 Automated Review Setup Required
            
            To enable automated PR reviews on push, configure **CLAUDE_CODE_OAUTH_TOKEN** in repository secrets.
            
            See the [setup instructions](https://github.com/good-night-oppie/oppie-autonav/blob/main/docs/SETUP_GUIDE.md#github-secrets-configuration) for details.`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Start PR Monitor
        if: steps.detect.outputs.complexity >= '7'
        run: |
          # Start background monitoring for high-complexity PRs
          if [ -f "./hooks/pr-review/pr-monitor.sh" ]; then
            ./hooks/pr-review/pr-monitor.sh monitor ${{ github.event.pull_request.number }} ${{ steps.detect.outputs.complexity }} &
            echo "Started PR monitoring for high-complexity PR"
          fi

  shellcheck-validation:
    # Run shellcheck on shell scripts
    if: github.event_name == 'pull_request'
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Run shellcheck
        id: shellcheck
        run: |
          echo "Running shellcheck on shell scripts..."
          
          # Find all shell scripts
          SCRIPTS=$(find . -name "*.sh" -type f)
          ERRORS=0
          
          for script in $SCRIPTS; do
            echo "Checking: $script"
            if ! shellcheck -S warning "$script"; then
              ERRORS=$((ERRORS + 1))
            fi
          done
          
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          
          if [ "$ERRORS" -gt 0 ]; then
            echo "⚠️ ShellCheck found $ERRORS files with issues"
            exit 1
          else
            echo "✅ All shell scripts pass ShellCheck"
          fi
      
      - name: Comment on PR if failed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚠️ ShellCheck found issues in ${{ steps.shellcheck.outputs.errors }} shell script(s). Please review the logs and fix the issues.
              
              Common issues to check:
              - Unquoted variables
              - Missing error handling
              - Deprecated syntax
              - Security vulnerabilities`
            })

  test-runner:
    # Run tests if they exist
    if: github.event_name == 'pull_request'
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Detect and run tests
        run: |
          echo "Looking for test files..."
          
          # Check for different test runners
          if [ -f "package.json" ] && grep -q "\"test\"" package.json; then
            echo "Running npm tests..."
            npm install
            npm test
          elif [ -f "Makefile" ] && grep -q "^test:" Makefile; then
            echo "Running make test..."
            make test
          elif [ -f "pytest.ini" ] || [ -d "tests" ]; then
            echo "Running pytest..."
            pip install pytest
            pytest
          elif [ -f "test/test-runner.sh" ]; then
            echo "Running custom test runner..."
            ./test/test-runner.sh
          else
            echo "No tests found, skipping..."
          fi